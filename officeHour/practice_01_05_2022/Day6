Office Hours 01/05/2022

CobinGroup.Practice Topics:

                     - CUSTOM METHODS :

        Method : Function . it is code fragments that can reuse in your framework

        Void Methods :      public static void sum (int a ){
                              sout(a);
                            }


        Return Methods :    public static int/boolean/Object/arr[]  sum (int a ){

                                return intValue;
                            }

        public : Access Modifier ( public - private - protected - default ) for now use only public

        static : Specifier  ( final - abstaract - static - synchorized )

                                ClassName.methodName()        // Arrays.toString()


        void : does not return any data

        returnType : MUST Return according to method


        int a : it is a paramter

            =================================

            --> PASS ARGUMENT

             public static void main(String[] args) {

                  sum(5,4);
               // sum(5.5,4);  // Compiler Error

                 System.out.println(sum1(5, 4));
             }

             public static void sum(int a,int b){
               System.out.println(a+b);
             }

             public static int sum1(int a,int b){

               return a+b;
             }

             ================================

            public static int sum(int a,int b){

                return IntegerValue;
            }

            main(Strings[] args){
            double a=5.4;
            double b=5.3;
            sout(sum(a,b));      // Compiler Error
            }

            // Compiler can do for us only Implicit Casting


            ===================================

            public static void main(String[] args) {
              System.out.println("Not Deep");
              deep();
              System.out.println("Not Deep");

            }

            public static void deep() {
            System.out.println(" Deep");
            deeper();
            System.out.println(" Deep");

            }

            public static void deeper() {
            System.out.println(" Deeper");

            }



    PRACTICES :
                    /*  (PrimeNumber)

                     Task 1 :   Write a method that can check if a number is prime or not
				       Note : Prime numbers are special numbers, greater than 1, that have exactly two factors, themselves and 1

                                   10 -- 10 and 1 it is Prime     10 / 1-2-5-10         it is not Prime
                                    7                              7  / 1-7             PrimeNumber
                                   13                             13/  1-13             PrimeNumber
                                    9                              9 /  1-3-9           it is not Prime

                     */

                     /*  (RemoveSpaces)

                      Task 3 :   Write a method that can remove  all extra space from String


    			            Input: "  Hello world      I      love      Java    "
        	               Output: Hello world I love Java

                     */


                    ====================================================================


                  - METHODS OVERLOADING :

                if a class has multiple methods with same it is called method overloaading


        Adv :
                - Reusabilty
                - Flexible
                - Readable
                - Easy to memorize
                        Bad CobinGroup.Practice : sum1(int a,int b)     sum2(double a, double b)
                        Good CobinGroup.Practice: sum(int a,int b)      sum(double a, double b)

        Rules :

                - Number of Prameters -- OVERLOADING

                    add(int a,int b );
                    add(int a);

                - Dataypes of Paramters -- OVERLOADING

                    add(int a,float b);
                    add(int a,int a);

                - Sequrnce of Paramters -- OVERLOADING
                    add(int a,float b);
                    add(float a,int b);

                - Return Type           -- Invalid Case
                    int   add(int a,float b);
                    float add(float a,int b);


                  ========================================================================


                  - WRAPPER CLASS :

                 --> Wrapper classes provide a way to use primitive data types (int, boolean, etc..) as objects.
                 --> Sometimes you must use wrapper classes, for example when working with Collection objects, such as ArrayList, where primitive types cannot be used (the list can only store objects)

                 =============



     public static void main(String args[]){

        byte b = 10;
        short s = 20;
        int i = 30;
        long l = 40;
        float f = 50.0F;
        double d = 60.0D;
        char c = 'a';
        boolean b2 = true;

        //Autoboxing: Converting primitives into objects
        Byte byteobj = b;
        Short shortobj = s;
        Integer intobj = i;
        Long longobj = l;
        Float floatobj = f;
        Double doubleobj = d;
        Character charobj = c;
        Boolean boolobj = b2;

        //Printing objects
        System.out.println("---Printing object values---");
        System.out.println("Byte object: " + byteobj);
        System.out.println("Short object: " + shortobj);
        System.out.println("Integer object: " + intobj);
        System.out.println("Long object: " + longobj);
        System.out.println("Float object: " + floatobj);
        System.out.println("Double object: " + doubleobj);
        System.out.println("Character object: " + charobj);
        System.out.println("Boolean object: " + boolobj);

        //Unboxing: Converting Objects to Primitives
        byte bytevalue = byteobj;
        short shortvalue = shortobj;
        int intvalue = intobj;
        long longvalue = longobj;
        float floatvalue = floatobj;
        double doublevalue = doubleobj;
        char charvalue = charobj;
        boolean boolvalue = boolobj;

        //Printing primitives
        System.out.println("---Printing primitive values---");
        System.out.println("byte value: " + bytevalue);
        System.out.println("short value: " + shortvalue);
        System.out.println("int value: " + intvalue);
        System.out.println("long value: " + longvalue);
        System.out.println("float value: " + floatvalue);
        System.out.println("double value: " + doublevalue);
        System.out.println("char value: " + charvalue);
        System.out.println("boolean value: " + boolvalue);


        //  parseInt(),parseDouble() etc vs valueOf()

        //Integer num=new Integer(300);
        Integer num3=Integer.valueOf(300);   // return Object
        int num2 = Integer.parseInt("123");  // return primitives
        System.out.println("num3 : "+num3);

        // - WrapperClassMethods
        System.out.println("=================");
        System.out.println(Integer.max(5, 4));
        System.out.println("Integer.min(5,4) = " + Integer.min(5, 4));
        System.out.println("Integer.sum(5,4) = " + Integer.sum(5, 4));

        System.out.println(Integer.MIN_VALUE);
        System.out.println("Integer.MAX_VALUE = " + Integer.MAX_VALUE);

        System.out.println("Integer.compare(5,4) = " + Integer.compare(5, 4));
        System.out.println("Integer.compare(5,5) = " + Integer.compare(5, 5));
        System.out.println("Integer.compare(4,5) = " + Integer.compare(4, 5));

        System.out.println("Character.isDigit('4') = " + Character.isDigit('4'));
        System.out.println("Character.isAlphabetic('0') = " + Character.isAlphabetic('0'));
        System.out.println("Character.isLetter('r') = " + Character.isLetter('r'));




    PRACTICES :

                 /*   (WraperTask)

                   Task :

                        String str = "(((W&e**_lco73me %T%o Co!@$,,<r>e <J>>>$@av^453a";

                        Write a method that returns : Welcome To Core Java

                */


                =============================================================================


                - ARRAYLIST :

                --> ArrayList is a resizable-array implementation of the List interface.

		        --> The dif between Array and Arraylist Arrays have fixed length, ArrayList does
                   * not have fixed size Arrays accept primitive types and object, ArrayList
                   * stores only objects. A print statement we can print the ArrayList without
                   * using to string or loop.

		        * list.add()
		        * list.get()
		        * list.set()
		        * list.indexOf()
		        * list.lastIndexOf()
                * list.size()
                * list.contains()
		        * list.remove()
		        * Bulk Operations: Perform an operation on an entire Collection.
                * removeAll()
		        * retainAll()
		        * removeIf()
		        * clear()
		        * isEmpty()
                * Collections.sort(list)
                * Collections.frequency(list, object)


     PRACTICES :

                /*  (HidePassword)

                 Task 2 : Hide Passwords

			        Given an array of passwords (String). Hide each password as a star (*) and show the hidden password

					Ex:

					Input:
					{"one", "hi", "hold}

					Output:
					[ ***, **, **** ]

                */

                /*   (SumOfString)

		          Task 3 : String numbers to sum

					Given an ArrayList of numbers in String format, add each digit of each element and store into a different ArrayList.

					Ex:

					Input:
					“123”, “34”, “513”

					Output:
					[ 6, 7, 9 ]

               */

